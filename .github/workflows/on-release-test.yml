name: "on release test"

on:
  push:
  release:
    types: [published]

jobs:
  echo:
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run: echo ${{ github.event.release.prerelease }}, ${{ github.event.release.tag_name }}, ${{ github.event_name }}

  # delete-release:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - id: get-previous-release-tag
  #       shell: bash
  #       run: |
  #         release_list=$(gh release list --json tagName,isPrerelease,isDraft)
  #         echo "relase_list: $release_list"
  #         # prereleaseの有無を取得
  #         prerelease_tag=$(echo "$release_list" | jq -r 'map(select(.isDraft == false and .isPrerelease == true and (.tagName | startswith("release/production/"))))[0].tagName')
  #         echo "prerelease_tag: $prerelease_tag"
  #         if [[ -n "$prerelease_tag" ]]; then
  #           has_prerelease="true"
  #         else
  #           has_prerelease="false"
  #         fi
  #         echo "has_prerelease=$has_prerelease" >> $GITHUB_OUTPUT

  #         # リリース済みのhash取得対応
  #         prev_release_tag_name=$(echo "$release_list" | jq -r 'map(select(.isDraft == false and .isPrerelease == false and (.tagName | startswith("release"))))[0].tagName') # TODO: 既存のリリースの文字列ルールにより初回のみ "release" だが、1回リリースが終わった後は "release/production" に変更する
  #         echo "prev_release_tag_name: $prev_release_tag_name"
  #         git fetch --tags --depth=1
  #         prev_release_tag_hash=$(git rev-list -n 1 "$prev_release_tag_name")
  #         echo "prev_release_tag_hash: $prev_release_tag_hash"
  #         echo "prev_release_tag_hash=$prev_release_tag_hash" >> $GITHUB_OUTPUT
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Delete release and tag
  #       run: |
  #         gh release delete ${{ github.event.release.tag_name }} -y
  #         git push origin --delete ${{ github.event.release.tag_name }}
  #       env:
  #         GH_TOKEN: ${{ github.token }}
